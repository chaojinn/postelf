{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.scss","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/test/test.component.html","webpack:///./src/app/test/test.component.scss","webpack:///./src/app/test/test.component.ts","webpack:///./src/app/wizard.service.ts","webpack:///./src/app/wizard/wizard.component.html","webpack:///./src/app/wizard/wizard.component.scss","webpack:///./src/app/wizard/wizard.component.ts","webpack:///./src/app/wizard/wizard.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent }   from './login/login.component';\nimport { WizardComponent }   from './wizard/wizard.component';\nimport { TestComponent }   from './test/test.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'wizard', component: WizardComponent },\n  { path: 'test', component: TestComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<router-outlet></router-outlet>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { WizardService } from  './wizard.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'postelf';\n  \n  constructor(private router: Router, private  wizardService:  WizardService) {\n    \n  }\n  \n   ngOnInit() {\n   console.log(\"this.router.url:\"+window.location);\n    if(window.location.toString().lastIndexOf(\"/\") == window.location.toString().length-1){\n      this.wizardService.getCurrentConfig().subscribe( data => {\n        if(data[\"code\"]==200&&data[\"installed\"]!=\"yes\")\n          this.router.navigate(['/wizard']);\n        else\n          this.router.navigate(['/login']);\n      },err=>{\n        console.log(\"error:\"+err);\n      });\n    }\n    \n   }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule,ReactiveFormsModule  }   from '@angular/forms';\nimport { HttpClientModule } from  '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { WizardComponent } from './wizard/wizard.component';\nimport { TestComponent } from './test/test.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    WizardComponent,\n    TestComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"username\\\">Username</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"username\\\" required name=\\\"username\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"password\\\">Password</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"password\\\" required name=\\\"password\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <button name=\\\"login\\\" id=\\\"login\\\" (click)=\\\"onClickMe()\\\">Login</button>\\n  </div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n  \n  onClickMe(){\n    console.log(\"onClickMe done\");\n  }\n}\n","module.exports = \"<p>\\n  <button id=\\\"btnRunWizard\\\" class=\\\"btn btn-primary\\\" (click)=\\\"testRun()\\\">Wizard Run</button><br>\\n  <button id=\\\"btnRunWizard\\\" class=\\\"btn btn-primary\\\" (click)=\\\"testCreateFolder()\\\">test create folder</button><br>\\n  <button id=\\\"btnRunWizard\\\" class=\\\"btn btn-primary\\\" (click)=\\\"testWriteFile()\\\">test write file</button><br>\\n  <button id=\\\"btnRunWizard\\\" class=\\\"btn btn-primary\\\" (click)=\\\"testRestartService()\\\">test restart service</button><br>\\n  <button id=\\\"btnRunWizard\\\" class=\\\"btn btn-primary\\\" (click)=\\\"testStartCore()\\\">test start core</button><br>\\n  <button id=\\\"btnRunWizard\\\" class=\\\"btn btn-primary\\\" (click)=\\\"testDependency()\\\">test check dependency</button><br>\\n  <button id=\\\"btnRunWizard\\\" class=\\\"btn btn-primary\\\" (click)=\\\"testLogin()\\\">test login</button><br>\\n  <button id=\\\"btnRunWizard\\\" class=\\\"btn btn-primary\\\" (click)=\\\"testGetUser()\\\">test get user</button><br>\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { WizardService } from  '../wizard.service';\n@Component({\n  selector: 'app-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.scss']\n})\nexport class TestComponent implements OnInit {\n\n  constructor(private  wizardService:  WizardService) { }\n\n  ngOnInit() {\n  }\n\n  testRun(){\n    console.log(\"testRun clicked\");\n    this.wizardService.testRunWizard().subscribe( data => {\n      console.log(data);\n    },err=>{\n      console.log(\"error:\"+err);\n    });\n    \n  }\n  \n  testCreateFolder(){\n    console.log(\"testCreateFolder clicked\");\n    this.wizardService.testCreateFolder().subscribe( data => {\n      console.log(data);\n    },err=>{\n      console.log(\"error:\"+err);\n    });\n  }\n  \n  testWriteFile(){\n    console.log(\"testWriteFile clicked\");\n    this.wizardService.testWriteFile().subscribe( data => {\n      console.log(data);\n    },err=>{\n      console.log(\"error:\"+err);\n    });\n  }\n  \n  testRestartService(){\n    console.log(\"testRestartService clicked\");\n    this.wizardService.testRestartService().subscribe( data => {\n      console.log(data);\n    },err=>{\n      console.log(\"error:\"+err);\n    });\n  }\n  \n  testStartCore(){\n    console.log(\"testStartCore clicked\");\n    this.wizardService.testStartCore().subscribe( data => {\n      console.log(data);\n    },err=>{\n      console.log(\"error:\"+err);\n    });\n  }\n  \n  testDependency(){\n    console.log(\"testDependency clicked\");\n    this.wizardService.testDependencyMock().subscribe( data => {\n      console.log(data);\n    },err=>{\n      console.log(\"error:\"+err);\n    });\n  }\n  \n  testLogin(){\n    console.log(\"testLogin clicked\");\n    this.wizardService.testLogin().subscribe( data => {\n      console.log(data);\n    },err=>{\n      console.log(\"error:\"+err);\n    });\n  }\n  \n  testGetUser(){\n    console.log(\"testGetUser clicked\");\n    this.wizardService.testGetUser().subscribe( data => {\n      console.log(data);\n    },err=>{\n      console.log(\"error:\"+err);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient,HttpHeaders,HttpParams} from  '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WizardService {\n  API_URL  =  'http://localhost:3030';\n  CORE_API_URL  =  'http://localhost:3033';\n  \n  constructor(private  httpClient:  HttpClient) {\n    \n    /*let fullURL=window.location;\n    let strFullURL=fullURL.toString().toLowerCase();\n    let https=false;\n    if(strFullURL.indexOf(\"https://\")!=-1)\n      https=true;\n    strFullURL=strFullURL.replace(\"https://\",\"\");\n    strFullURL=strFullURL.replace(\"http://\",\"\");\n    let idx=strFullURL.indexOf(\"/\");\n    if(https)\n      this.API_URL=\"https://\"+strFullURL.substr(0,idx);\n    else\n      this.API_URL=\"http://\"+strFullURL.substr(0,idx);  */\n  }\n  \n  testDatabase(config:object)  {\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    \n    let ret=this.httpClient.put(this.API_URL+\"/wizard-controller\",{cmd:\"testDatabase\",data:config},{headers});\n    \n    return ret;\n  }\n  \n  testDependency(config:object)  {\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.put(this.API_URL+\"/wizard-controller\",{cmd:\"testDependency\",data:config},{headers});\n    \n    return ret;\n  }\n  \n  finishWizard(config:object){\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    \n    let ret=this.httpClient.put(this.API_URL+\"/wizard-controller\",{cmd:\"finishWizard\",data:config},{headers});\n    \n    return ret;\n  }\n  \n  getCurrentConfig()\n  {\n    console.log(\"getCurrentConfig called:\"+this.API_URL);\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.put(this.API_URL+\"/wizard-controller\",{cmd:\"getConfig\"},{headers});\n    \n    return ret;\n  }\n  \n  testRunWizard()\n  {\n    const config={\n      \n      \n    };\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.put(this.API_URL+\"/wizard-controller\",{cmd:\"finishWizard\",data:config},{headers});\n    return ret;\n  }\n  \n  testCreateFolder()\n  {\n    const config={\n      path: '/etc/postfix/certs'\n    };\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.put(this.CORE_API_URL+\"/postelf-core\",{cmd:\"createFolder\",data:config},{headers});\n    return ret;\n  }\n  \n  testWriteFile()\n  {\n    const config={\n      path: '/etc/postfix/certs/server.csr',\n      content:\"aaaaaaaaaaaddddddddddsssssssss\"\n    };\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.put(this.CORE_API_URL+\"/postelf-core\",{cmd:\"writeFile\",data:config},{headers});\n    return ret;\n    \n  }\n  \n  testRestartService(){\n    const config={\n      service: 'saslauthds'\n    };\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.put(this.CORE_API_URL+\"/postelf-core\",{cmd:\"restartService\",data:config},{headers});\n    return ret;\n  }\n  \n  testStartCore(){\n    const config={\n      \n    };\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.put(this.API_URL+\"/wizard-controller\",{cmd:\"startCoreService\",data:config},{headers});\n    return ret;\n  }\n  \n  testDependencyMock()\n  {\n    \n    const config={\n      \n      \n    };\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.put(this.API_URL+\"/wizard-controller\",{cmd:\"testDependency\",data:config},{headers});\n    return ret;\n  }\n  \n  testLogin(){\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let ret=this.httpClient.post(this.API_URL+\"/authentication\",{\"strategy\":\"local\",\"email\":\"123@123\",\"password\":\"123123\"},{headers});\n    return ret;\n  }\n  \n  testGetUser(){\n    const headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n    let params = new HttpParams().set(\"email\",\"123@123\").set(\"$limit\",\"1\");\n    let ret=this.httpClient.get(this.API_URL+\"/users\",{headers:headers,params:params});\n    return ret;\n  }\n}\n","module.exports = \"<div class=\\\"container\\\">\\n  <h1>Install Wizard, Step {{wizard.step}}/{{wizard.totalStep}}</h1>\\n\\n  <div *ngIf=\\\"wizard.step==1\\\">\\n    <form [formGroup]=\\\"wizardForm1\\\" > \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"loginAdmin\\\">Admin Login(email)</label>\\n        <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"loginAdmin\\\" formControlName=\\\"loginName\\\" placeholder=\\\"Admin Login\\\" >\\n        <div *ngIf=\\\"wizardForm1.controls.loginName.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm1.controls.loginName.errors.required\\\">\\n            Admin Login is required.\\n          </div>\\n          <div *ngIf=\\\"wizardForm1.controls.loginName.errors.email\\\">\\n            Admin Login is not a vaild email address.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" formControlName=\\\"password\\\"  >\\n        <div *ngIf=\\\"wizardForm1.controls.password.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm1.controls.password.errors.required\\\">\\n            Password is required.\\n          </div>\\n          <div *ngIf=\\\"wizardForm1.controls.password.errors.minlength\\\">\\n            Password must be at least 6 characters.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"cfmpassword\\\">Confirm Password</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"cfmPassword\\\" formControlName=\\\"cfmPassword\\\"  >\\n        <div *ngIf=\\\"wizardForm1.controls.cfmPassword.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm1.controls.cfmPassword.errors.required\\\">\\n            Confirm password is required.\\n          </div>\\n          <div *ngIf=\\\"wizardForm1.controls.cfmPassword.errors.notEquivalent\\\">\\n            Confirm password does not match password.\\n          </div>\\n          <div *ngIf=\\\"wizardForm1.controls.cfmPassword.errors.minlength\\\">\\n            Confirm password must be at least 6 characters.\\n          </div>\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n  <div *ngIf=\\\"wizard.step==2\\\">\\n    <form [formGroup]=\\\"wizardForm2\\\" > \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"dbAddress\\\">Database Address</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"dbAddress\\\" formControlName=\\\"dbAddress\\\" placeholder=\\\"Database address(ip or domain)\\\" >\\n        <div *ngIf=\\\"wizardForm2.controls.dbAddress.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm2.controls.dbAddress.errors.required\\\">\\n            Database address is required.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"dbUSer\\\">Database User</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"dbUSer\\\" formControlName=\\\"dbUSer\\\" placeholder=\\\"Database user\\\" >\\n        <div *ngIf=\\\"wizardForm2.controls.dbUSer.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm2.controls.dbUSer.errors.required\\\">\\n            Database user is required.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"dbPassword\\\">Database Password</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"dbPassword\\\" formControlName=\\\"dbPassword\\\" placeholder=\\\"Database password\\\" >\\n        <div *ngIf=\\\"wizardForm2.controls.dbPassword.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm2.controls.dbPassword.errors.required\\\">\\n            Database password is required.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"dbName\\\">Database Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"dbName\\\" formControlName=\\\"dbName\\\" placeholder=\\\"Database name\\\" >\\n        <div *ngIf=\\\"wizardForm2.controls.dbName.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm2.controls.dbName.errors.required\\\">\\n            Database name is required.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <button id=\\\"btnTestConnection\\\" class=\\\" btn btn-primary\\\" (click)=\\\"testDBConnection()\\\" style=\\\"margin-bottom: 10px;\\\">Test DB Connection</button>\\n        \\n        <div *ngIf=\\\"dbTested==2\\\" class=\\\"alert alert-danger\\\">\\n          Connect to db failed, pleaes check db credentials\\n        </div>\\n        <div *ngIf=\\\"dbTested==1\\\" class=\\\"alert alert-success\\\">\\n          DB tested OK\\n        </div>\\n        <div *ngIf=\\\"dbTested==0\\\" class=\\\"alert alert-warning\\\">\\n          Connecting to DB...\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n  <div *ngIf=\\\"wizard.step==3\\\">\\n    <form [formGroup]=\\\"wizardForm3\\\" > \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"emailDomain\\\">Email Domain</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"emailDomain\\\" formControlName=\\\"emailDomain\\\" placeholder=\\\"Email Domain\\\" >\\n        <div *ngIf=\\\"wizardForm3.controls.emailDomain.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm3.controls.emailDomain.errors.required\\\">\\n            Email domain is required.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"emailUser\\\">Email User</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"emailUser\\\" formControlName=\\\"emailUser\\\" placeholder=\\\"Email User\\\" >\\n        <div *ngIf=\\\"wizardForm3.controls.emailUser.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm3.controls.emailUser.errors.required\\\">\\n            Email USer is required.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"emailPassword\\\">Email Password</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"emailPassword\\\" formControlName=\\\"emailPassword\\\" placeholder=\\\"Email Password\\\" >\\n        <div *ngIf=\\\"wizardForm3.controls.emailPassword.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm3.controls.emailPassword.errors.required\\\">\\n            Email password is required.\\n          </div>\\n          <div *ngIf=\\\"wizardForm3.controls.emailPassword.errors.minlength\\\">\\n            Email password must be at least 6 characters.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"cfmEmailPassword\\\">Confirm Email Password</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"cfmEmailPassword\\\" formControlName=\\\"cfmEmailPassword\\\" placeholder=\\\"Confirm Email Password\\\" >\\n        <div *ngIf=\\\"wizardForm3.controls.cfmEmailPassword.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm3.controls.cfmEmailPassword.errors.required\\\">\\n            Confirm email password is required.\\n          </div>\\n          <div *ngIf=\\\"wizardForm3.controls.cfmEmailPassword.errors.notEquivalent\\\">\\n            Confirm email password does not match password.\\n          </div>\\n          <div *ngIf=\\\"wizardForm3.controls.cfmEmailPassword.errors.minlength\\\">\\n            Confirm email password must be at least 6 characters.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"baseMailFolder\\\">Path for Email Storage</label>\\n        <input class=\\\"form-control\\\" id=\\\"baseMailFolder\\\" formControlName=\\\"baseMailFolder\\\" placeholder=\\\"Path for email storage\\\">\\n        <div *ngIf=\\\"wizardForm3.controls.baseMailFolder.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm3.controls.baseMailFolder.errors.required\\\">\\n            Path for email storage is required.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"runasuser\\\">Run Postfix/Dovecot as User</label>\\n        <input class=\\\"form-control\\\" id=\\\"runasuser\\\" formControlName=\\\"runasuser\\\" placeholder=\\\"Run postfix/dovecot as user\\\" >\\n        <div *ngIf=\\\"wizardForm3.controls.runasuser.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm3.controls.runasuser.errors.required\\\">\\n            Run postfix/dovecot as user is required.\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"sudoPassword\\\">Sudo Password</label>\\n        <input class=\\\"form-control\\\" id=\\\"sudoPassword\\\" formControlName=\\\"sudoPassword\\\" placeholder=\\\"Sudo password\\\" >\\n        <div *ngIf=\\\"wizardForm3.controls.sudoPassword.invalid && submitted\\\" class=\\\"alert alert-danger\\\">\\n          <div *ngIf=\\\"wizardForm3.controls.sudoPassword.errors.required\\\">\\n            Sudo password is required.\\n          </div>\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n  <div *ngIf=\\\"wizard.step==4\\\">\\n    <form [formGroup]=\\\"wizardForm4\\\" > \\n      <h2 *ngIf=\\\"dependencyTested==0\\\">Checking dependency</h2>\\n      <h2 *ngIf=\\\"dependencyTested!=0\\\">Check dependency result</h2>\\n      <ul>\\n        <li *ngFor=\\\"let dep of dependencyResult\\\">\\n          <div *ngIf=\\\"dep.error;then err_result else ok_result\\\"></div>    \\n          <ng-template #err_result>{{ dep.name }} not installed</ng-template>\\n          <ng-template #ok_result>{{ dep.name }} check ok</ng-template>\\n          \\n        </li>\\n      </ul>\\n    </form>\\n  </div>\\n  \\n  <div class=\\\"form-group\\\">\\n    <button id=\\\"btnPrevious\\\" *ngIf=\\\"wizard.step>1\\\" class=\\\"btn btn-primary\\\" (click)=\\\"previousStep()\\\">Previous</button>\\n    <button id=\\\"btnNext\\\" *ngIf=\\\"wizard.step<=wizard.totalStep\\\" class=\\\"btn btn-primary\\\" (click)=\\\" nextStep()\\\" [disabled]=\\\"dependencyTested==0\\\">\\n      <span *ngIf=\\\"wizard.step<wizard.totalStep\\\">Next</span>\\n      <span *ngIf=\\\"wizard.step==wizard.totalStep&&dependencyTested==0\\\">Check</span>\\n      <span *ngIf=\\\"wizard.step==wizard.totalStep&&dependencyTested==1\\\">Finish</span>\\n      <span *ngIf=\\\"wizard.step==wizard.totalStep&&dependencyTested==2\\\">Check</span>\\n    </button>\\n  </div>\\n  \\n  \\n\\n<div>\\n\"","module.exports = \"#btnPrevious {\\n  margin-right: 5vw; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Wizard } from './wizard';\nimport {FormBuilder,FormControl,FormGroup,Validators} from '@angular/forms';\nimport { WizardService } from  '../wizard.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-wizard',\n  templateUrl: './wizard.component.html',\n  styleUrls: ['./wizard.component.scss']\n})\nexport class WizardComponent implements OnInit {\n  checked=false;\n  submitted=false;\n  dependencyResult:Array<any>;\n  dbTested=-1; //0 testing, //1 ok //2 failed\n  dependencyTested=-1;\n  wizardFinished=-1;\n  wizardForm1: FormGroup;\n  wizardForm2: FormGroup;\n  wizardForm3: FormGroup;\n  wizardForm4: FormGroup;\n  wizard: Wizard ;\n  \n  \n  constructor(private router: Router, private formBuilder: FormBuilder, private  wizardService:  WizardService) {\n    this.wizard=new Wizard();\n  }\n  \n  private checkIfMatchingPasswords(passwordKey: string, passwordConfirmationKey: string) {\n    return (group: FormGroup) => {\n      const passwordInput = group.controls[passwordKey];\n      const passwordConfirmationInput = group.controls[passwordConfirmationKey];\n      if (passwordInput.value !== passwordConfirmationInput.value) {\n        return passwordConfirmationInput.setErrors({notEquivalent: true});\n      } else {\n        return passwordConfirmationInput.setErrors(null);\n      }\n    };\n  }\n\n  ngOnInit() {\n    this.wizardForm1 = this.formBuilder.group({\n        loginName: [this.wizard.loginName, [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        cfmPassword: ['', [Validators.required, Validators.minLength(6)]]\n    },{validator: this.checkIfMatchingPasswords('password', 'cfmPassword')});\n    \n    this.wizardForm2 = this.formBuilder.group({\n        dbAddress: ['', [Validators.required]],\n        dbUSer: ['', [Validators.required]],\n        dbPassword: ['', [Validators.required]],\n        dbName: ['', [Validators.required]]\n    });\n    this.wizardForm3 = this.formBuilder.group({\n        emailDomain: ['', [Validators.required]],\n        emailUser: ['', [Validators.required]],\n        emailPassword: ['', [Validators.required, Validators.minLength(6)]],\n        cfmEmailPassword: ['', [Validators.required, Validators.minLength(6)]],\n        baseMailFolder:['', [Validators.required]],\n        runasuser:['', [Validators.required]],\n        sudoPassword:['', [Validators.required]],\n    },{validator: this.checkIfMatchingPasswords('emailPassword', 'cfmEmailPassword')});\n    \n    this.wizardForm4 = this.formBuilder.group({\n    });\n  }\n  \n  nextStep(){\n    this.submitted = true;\n    \n    if (this[\"wizardForm\"+this.wizard.step].invalid) {\n      return;\n    }\n    \n    for(let keyName in this[\"wizardForm\"+this.wizard.step].controls){\n      this.wizard[keyName]=this[\"wizardForm\"+this.wizard.step].controls[keyName].value;\n    }\n    console.log(\"submit ok:\"+JSON.stringify(this.wizard));\n    \n    this.submitted = false;\n    if(this.wizard.step==4){\n      if(this.dependencyTested==1)\n        this.finishWizard();\n      else\n        this.testDependency();\n      return;\n    }\n    this.wizard.step++;\n    console.log(\"next clicked\");\n    if(this.wizard.step==4){\n      this.testDependency();\n    }\n    \n  }\n  \n  previousStep(){\n    \n    console.log(\"previousStep clicked\");\n    this.wizard.step--;\n    \n  }\n  \n  testDBConnection(){\n    console.log(\"testDBConnection\");\n    this.dbTested=0;\n    this.submitted = true;\n    \n    if (this[\"wizardForm\"+this.wizard.step].invalid) {\n      return;\n    }\n    \n    for(let keyName in this[\"wizardForm\"+this.wizard.step].controls){\n      this.wizard[keyName]=this[\"wizardForm\"+this.wizard.step].controls[keyName].value;\n    }\n    console.log(JSON.stringify(this.wizard));\n    this.wizardService.testDatabase(this.wizard).subscribe( data => {\n      console.log(data);\n      if(data[\"error\"])\n        this.dbTested=2;\n      else\n        this.dbTested=1;\n    },err=>{\n      this.dbTested=2;\n      console.log(\"error:\"+err);\n    });\n  }\n  \n  testDependency(){\n    console.log(\"testDependency\");\n    this.dependencyTested=0\n    this.wizardService.testDependency(this.wizard).subscribe( data => {\n      console.log(data);\n      if(Array.isArray(data)){\n        this.dependencyResult=data;\n      }\n      let i=0;\n      let error=false;\n      console.log(JSON.stringify(data));\n      for(i=0;i<this.dependencyResult.length;i++){\n        if(this.dependencyResult[i].error){\n          this.dependencyTested=2;\n          error=true;\n          break;\n        }\n      }\n      if(!error)\n        this.dependencyTested=1;\n    },err=>{\n      this.dependencyTested=2;\n      console.log(\"error:\"+err);\n    });\n    \n  }\n  \n  finishWizard(){\n    console.log(\"finishWizard\");\n    this.wizardFinished=0\n    this.wizardService.finishWizard(this.wizard).subscribe( data => {\n      console.log(data);\n      if(data[\"code\"]==200){\n        this.router.navigate(['/login']);\n        this.wizardFinished=1;\n      }\n    },err=>{\n      this.wizardFinished=2;\n      console.log(\"error:\"+err);\n    });\n  }\n}\n","export class Wizard {\n  step: number;\n  totalStep: number;\n  loginName:string;\n  password:string;\n  cfmPassword:string;\n  dbAddress:string;\n  dbUSer:string;\n  dbPassword:string;\n  dbName:string;\n  emailDomain:string;\n  emailUser:string;\n  emailPassword:string;\n  cfmEmailPassword:string;\n  baseMailFolder:string;\n  runasuser:string;\n  dependency:string[];\n  \n  constructor() {\n    this.step = 1;\n    this.totalStep = 4;\n    this.loginName = \"\";\n    this.password = \"\";\n    this.cfmPassword = \"\";\n    this.dbAddress=\"\";\n    this.dbUSer=\"\";\n    this.dbPassword=\"\";\n    this.dbName=\"\";\n    this.emailDomain=\"\";\n    this.emailUser=\"\";\n    this.emailPassword=\"\";\n    this.cfmEmailPassword=\"\";\n    \n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}